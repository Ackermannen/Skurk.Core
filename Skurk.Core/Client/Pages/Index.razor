@page "/"
@using Skurk.Core.Shared.Week;
@inherits FluxorComponent
@inject IDispatcher _dispatcher
@inject ISnackbar _snackbar;
@inject IState<HandleTimeState> _handleTimeState

<PageTitle>Index</PageTitle>

<MudText Typo="Typo.h3">Hello, world! The current date is
    
        @if (_state == null || _state.IsLoadingWeek)
        {
            <MudSkeleton Class="d-inline-block" Width="200px" />
        }
        else
        {
            @_state?.Date
        }
</MudText>

<MudTable Items="@_state?.Week.TimeTasks" Dense="false" Hover="true" CanCancelEdit="@true" Loading="_state == null || _state.IsLoadingWeek"
          @bind-SelectedItem="selectedItem" SortLabel="Sort By" CommitEditTooltip="Save row"
          OnCommitEditClick="@(() => _snackbar.Add("Updating row", Severity.Info))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted" ApplyButtonPosition="TableApplyButtonPosition.End" EditButtonPosition="TableEditButtonPosition.End" EditTrigger="TableEditTrigger.RowClick">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Tidsrapport</MudText>
        <MudSpacer />
    </ToolBarContent>
    <ColGroup>
        <col style="width:350px" />
        @for (var dayNr = 0; dayNr < _state?.Week.NumberOfDays; dayNr++)
        {
            <col />
        }
        <col style="width:50px;" />
    </ColGroup>
    <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<TimeTaskDto, object>(x=>x.TaskId)">Task</MudTableSortLabel></MudTh>
        @if(_state != null)
        {
            for (var dayNr = 0; dayNr < _state.Week.NumberOfDays; dayNr++)
            {
                var i = dayNr;
                var day = _state.Week.StartDay.ToDateTime(TimeOnly.MinValue);
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<TimeTaskDto, object>(x=>x.Times[i])">@day.AddDays(i).ToString("ddd")</MudTableSortLabel></MudTh>
            }
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="TaskId">@context.TaskId</MudTd>
        @foreach(var time in context.Times)
        {
            <MudTd>@time</MudTd>
        }
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="TaskId">@context.TaskId</MudTd>
        @for(var dayNr = 0; dayNr < context.Times.Length; dayNr++)
        {
            var i = dayNr;
            <MudTd>
                <MudNumericField Format="F2" HideSpinButtons="true" @bind-Value="context.Times[i]" T="float" Step="0.25f"/>
            </MudTd>
        }
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>

@code {
    private TimeTaskDto selectedItem = default!;
    private TimeTaskDto elementBeforeEdit = default!;
    private HandleTimeState? _state => _handleTimeState.Value;

    protected override void OnInitialized()
    {
        if (_state == null || _state.Week == null)
        {
            _dispatcher.Dispatch(new SetDateAction(new GetWeekQuery
                {
                    Date = DateOnly.FromDateTime(DateTime.Now)
                }));
        }

        base.OnInitialized();
    }

    private void BackupItem(object obj)
    {
        var element = (TimeTaskDto)obj;
        elementBeforeEdit = new()
        {
            Id = element.Id,
            TaskId = element.TaskId,
            Times = element.Times,
        };
    }

    private void ItemHasBeenCommitted(object element)
    {
    }

    private void ResetItemToOriginalValues(object obj)
    {
        var element = (TimeTaskDto)obj;
        element.Id = elementBeforeEdit.Id;
        element.TaskId = elementBeforeEdit.TaskId;
        element.Times = elementBeforeEdit.Times;
    }
}