@page "/"
@using MediatR;
@using Skurk.Core.Shared.Week;
@inherits StatefulComponent
@inject ISnackbar _snackbar
@inject HandleTimeState _state;
@inject ClientMediator _client;

<PageTitle>Index</PageTitle>

<MudText Typo="Typo.h3">Hello, world! The current date is
    
        @if (_state.IsLoadingWeek)
        {
            <MudSkeleton Class="d-inline-block" Width="200px" />
        }
        else
        {
            @_state.Date
        }
</MudText>

<MudTable Items="@(_state.Week == null ? new List<TimeTaskDto>() : _state.Week.TimeTasks)" Dense="false" Hover="true" Loading="_state.IsLoadingWeek"
          @bind-SelectedItem="selectedItem" SortLabel="Sort By" CommitEditTooltip="Save row"
          OnCommitEditClick="@(() => _snackbar.Add("Updating row", Severity.Info))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted" ApplyButtonPosition="TableApplyButtonPosition.Start" EditTrigger="TableEditTrigger.RowClick">
    <ToolBarContent>
        <MudIconButton Icon="@Icons.TwoTone.ArrowLeft" Size="Size.Small" OnClick="() => HandleDayChange(DateOnly.FromDayNumber(_state.Date.DayNumber - 7))"/>
        <MudText Typo="Typo.h6">@_state.Date</MudText>
        <MudIconButton Icon="@Icons.TwoTone.ArrowRight" Size="Size.Small" OnClick="() => HandleDayChange(DateOnly.FromDayNumber(_state.Date.DayNumber + 7))" />
        <MudSpacer />
        <MudTooltip Text="Add Time row">
            <MudIconButton Icon="@Icons.Filled.Add" OnClick="AddTimeTask" />
        </MudTooltip>
        <MudTooltip Text="Refresh content">
            <MudIconButton Icon="@Icons.Filled.Refresh" OnClick="ReloadWeek"/>
        </MudTooltip>
    </ToolBarContent>
    <ColGroup>
        <col style="width:350px" />
        @for (var dayNr = 0; dayNr < _state.Week?.NumberOfDays; dayNr++)
        {
            <col />
        }
        <col style="width:50px;" />
    </ColGroup>
    <LoadingContent>
        Loading content...
    </LoadingContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<TimeTaskDto, object>(x=>x.TaskId)">Task</MudTableSortLabel></MudTh>
        @for (var dayNr = 0; dayNr < _state.Week?.NumberOfDays; dayNr++)
        {
            var i = dayNr;
            var day = _state.Week.StartDay.ToDateTime(TimeOnly.MinValue);
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<TimeTaskDto, object>(x=>x.Times[i])">@day.AddDays(i).ToString("ddd")</MudTableSortLabel></MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="TaskId">@context.TaskId</MudTd>
        @foreach(var time in context.Times)
        {
            <MudTd>@time</MudTd>
        }
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="TaskId">@context.TaskId</MudTd>
        @for(var dayNr = 0; dayNr < context.Times.Length; dayNr++)
        {
            var i = dayNr;
            <MudTd>
                <MudNumericField Format="F2" HideSpinButtons="true" @bind-Value="context.Times[i]" T="float" Step="0.25f"/>
            </MudTd>
        }
        <MudTd DataLabel="DeleteButton">
            <MudTooltip>
                <MudIconButton Icon="@Icons.TwoTone.RemoveCircle" OnClick="() => RemoveTimeTask(context)"/>
            </MudTooltip>
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>

@code {
    private TimeTaskDto selectedItem = default!;
    private TimeTaskDto elementBeforeEdit = default!;

    protected override async Task OnInitializedAsync()
    {
        RegisterState(_state);

        await ReloadWeek();

        await base.OnInitializedAsync();
    }

    private async Task HandleDayChange(DateOnly date)
    {
        _state.Date = date;
        await ReloadWeek();
    }

    private void AddTimeTask()
    {
        _state.Week?.TimeTasks.Add(new TimeTaskDto
            {
                Id = Guid.NewGuid(),
                TaskId = Guid.Empty,
                Times = new float[_state.Week.NumberOfDays],
            });
    }

    private async Task ReloadWeek()
    {
        _state.IsLoadingWeek = true;
        if(_state.Date == DateOnly.MinValue)
        {
            _state.Date = DateOnly.FromDateTime(DateTime.Now);
        }
        var result = await _client.Send(new GetWeekQuery
        {
                Date = _state.Date
        });
        _state.Week = result.Value;
        _state.IsLoadingWeek = false;
    }

    private void RemoveTimeTask(TimeTaskDto task)
    {
        _state.Week?.TimeTasks.Remove(task);
    }

    private void BackupItem(object obj)
    {
        var element = (TimeTaskDto)obj;
        elementBeforeEdit = new()
        {
            Id = element.Id,
            TaskId = element.TaskId,
            Times = element.Times,
        };
    }

    private void ItemHasBeenCommitted(object element)
    {
    }

    private void ResetItemToOriginalValues(object obj)
    {
        var element = (TimeTaskDto)obj;
        element.Id = elementBeforeEdit.Id;
        element.TaskId = elementBeforeEdit.TaskId;
        element.Times = elementBeforeEdit.Times;
    }
}